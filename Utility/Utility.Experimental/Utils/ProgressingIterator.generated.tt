<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;

namespace Utility
{
    public static partial class ProgressingIterator
    {

	<#
		string[] accumulateTypes = new string[]{"double", "float", "sbyte|true", "byte|true", "short|true", "ushort|true", "int", "uint", "long", "ulong", "char|true|'\\0'|int", "decimal"};

		foreach(string entry in accumulateTypes)
		{
		string acc;
		string zero;
		bool requiresConversion;
		string agg;

		string[] parts = entry.Split('|');
		acc = parts[0];
		requiresConversion = parts.Length > 1 ? bool.Parse(parts[1]) : false;
		zero = parts.Length > 2 ? parts[2] : "0";
		agg = parts.Length > 3 ? parts[3] : acc;

		/* IEnumerable<TItem> enumerable,
           TProgress zero,
           Func<TItem, TProgress> maximumProgressEvaluator,
           Func<TProgress, TProgressAccumulate, TProgress> progressAdd,
           Func<TProgress, TProgress, TProgressAccumulate> progressSubtract,
           Comparison<TProgress> progressComparison,
           Func<TItem, TProgress, TResult> resultSelector
		*/

		Func<string, string, string> conversionApp = (s, tp) => requiresConversion ? $"({tp})({s})" : s;
		#>
		public static ProgressingIterator<TResult, TItem, <#=acc#>, <#=agg#>> CreateInstance<TResult, TItem>(
           IEnumerable<TItem> enumerable,
           Func<TItem, <#=acc#>> maximumProgressEvaluator,
           Func<TItem, <#=acc#>, TResult> resultSelector)
        {
            return new ProgressingIterator<TResult, TItem, <#=acc#>, <#=agg#>>(
                    enumerable,
                    <#=zero#>,
                    maximumProgressEvaluator,
                    (x, y) => <#=conversionApp("x + y", acc)#>,
                    (x, y) => <#=conversionApp("x - y", agg)#>,
                    (x, y) => x.CompareTo(y),
                    resultSelector);
        }
		<#
		}
	#>
	}
}